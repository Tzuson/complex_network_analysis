data <- 5*nodes/max(nodes)
} else {
data <- nodes + 1
}# if
# Making plot of USpower
pdf(file=sprintf('%s/%s_plot.pdf',file_path,file_name))
par(mar=rep(0,4),oma=rep(0,4))
plot(net,vertex.label=NA
, vertex.size= data
, vertex.color="blue"
, edge.color="lightblue"
, edge.width=1
, vertex.frame.color="darkblue"
, edge.arrow.size = 0.5
, main = sprintf('\n\n %s',name))
dev.off()
# Plotting and storing histogram of USpower nodes data
if (do_hist){
nodes <- as.data.frame(nodes) %>%
`colnames<-`(c("value"))
p <- ggplot(nodes,aes(value)) +
ggtitle(name) + xlab("Vulnerability") + ylab("Frequency") +
geom_histogram(binwidth = 0.005)
ggsave(filename=sprintf('%s_hist.pdf',file_name),plot=p,device="pdf",path=file_path)
}# if
}# plot_uspower
plot_uspower(uspower_uu,1:vcount(uspower_uu),name="USpower_example")
plot_uspower <- function(net, nodes=NULL,file_path="Network-Data/USpower/pdf",file_name="uspower_uu",name="USpower"){
# Data is zero when missing
do_hist <- TRUE
if (is.null(nodes)){
nodes <- vector(mode="numeric", length = vcount(net))
do_hist <- FALSE
}# if
if (min(nodes)>0){
data <- nodes/min(nodes)
} else if (max(nodes)>0) {
data <- 5*nodes/max(nodes)
} else {
data <- nodes + 1
}# if
# Making plot of USpower
pdf(file=sprintf('%s/%s_plot.pdf',file_path,file_name))
par(mar=rep(0,4),oma=rep(0,4))
plot(net,vertex.label=NA
, vertex.size= data
, vertex.color="blue"
, edge.color="lightblue"
, edge.width=1
, vertex.frame.color="darkblue"
, edge.arrow.size = 0.5
, main = sprintf('\n\n %s',name))
dev.off()
# Plotting and storing histogram of USpower nodes data
if (do_hist){
nodes <- as.data.frame(nodes) %>%
`colnames<-`(c("value"))
p <- ggplot(nodes,aes(value)) +
ggtitle(name) + xlab("Vulnerability") + ylab("Frequency") +
geom_histogram(binwidth = max(nodes)-min(nodes)/100)
ggsave(filename=sprintf('%s_hist.pdf',file_name),plot=p,device="pdf",path=file_path)
}# if
}# plot_uspower
plot_uspower(uspower_uu,1:vcount(uspower_uu),name="USpower_example")
plot_uspower(uspower_uu,log2(1:vcount(uspower_uu)),name="USpower_example")
plot_uspower(uspower_uu,exp(1:vcount(uspower_uu)/vcount(uspower_uu)),name="USpower_example")
plot_uspower(uspower_uu,exp(1+1:vcount(uspower_uu)/vcount(uspower_uu)),name="USpower_example")
plot_uspower <- function(net, nodes=NULL,file_path="Network-Data/USpower/pdf",file_name="uspower_uu",name="USpower"){
# Data is zero when missing
do_hist <- TRUE
if (is.null(nodes)){
nodes <- vector(mode="numeric", length = vcount(net))
do_hist <- FALSE
}# if
# Giving the nodes the right
if (min(nodes)>0){
data <- 1 + nodes/mean(nodes)
} else if (max(nodes)>0) {
data <- 5*nodes/max(nodes)
} else {
data <- nodes + 1
}# if
# Making plot of USpower
pdf(file=sprintf('%s/%s_plot.pdf',file_path,file_name))
par(mar=rep(0,4),oma=rep(0,4))
plot(net,vertex.label=NA
, vertex.size= data
, vertex.color="blue"
, edge.color="lightblue"
, edge.width=1
, vertex.frame.color="darkblue"
, edge.arrow.size = 0.5
, main = sprintf('\n\n %s',name))
dev.off()
# Plotting and storing histogram of USpower nodes data
if (do_hist){
nodes <- as.data.frame(nodes) %>%
`colnames<-`(c("value"))
p <- ggplot(nodes,aes(value)) +
ggtitle(name) + xlab("Vulnerability") + ylab("Frequency") +
geom_histogram(binwidth = max(nodes)-min(nodes)/100)
ggsave(filename=sprintf('%s_hist.pdf',file_name),plot=p,device="pdf",path=file_path)
}# if
}# plot_uspower
plot_uspower(uspower_uu,exp(1+1:vcount(uspower_uu)/vcount(uspower_uu)),name="USpower_example")
plot_uspower(uspower_uu,1:vcount(uspower_uu),name="USpower_example")
#' @title Plot graph of USpower
#'
#' @description Plots a graph of uspower, supplied with data on the nodes. This
#'   data will be mapped to the size of the nodes, i.e. higher number for a node
#'   means larger node size. The size of the nodes is determined via the formula
#'   \code{data <- 1 + nodes/mean(nodes)} if \code{mean(nodes) > 0}. If this is
#'   not the case, then every data point is zero, so we just take size 1.
#'
#'   Furthermore it plots a histogram of the data on the nodes (not of the size
#'   of the nodes). Both plots are stored in the same location.
#'
#' @param net An uspower graph
#' @param nodes A vector with data on the nodes - optional -. This data should
#'   be more or equal then zero
#' @param mapping A function from nodes to positive numbers to give the size of
#'   the nodes - optional -. Default is the identity.
#' @param file_path A string giving the map (without file name nor .pdf) -
#'   optional -
#' @param file_name A string giving the file name (without .pdf) - optional -
#' @param name A string giving the name of the network to be used in the title -
#'   optional - of the plots
#'
#' @return A pdf with a plot of USpower, where the size depends on \code{nodes}
#'   and a pdf with a histogram of the data, if the data is not missing.
#'
#' @examples
#' plot_uspower(uspower_uu,1:vcount(uspower_uu),name="USpower_example")
plot_uspower <- function(net, nodes=NULL,mapping=function(x){x}, file_path="Network-Data/USpower/pdf",file_name="uspower_uu",name="USpower"){
# Data is zero when missing
do_hist <- TRUE
if (is.null(nodes)){
nodes <- vector(mode="numeric", length = vcount(net))
do_hist <- FALSE
}# if
# Making plot of USpower
pdf(file=sprintf('%s/%s_plot.pdf',file_path,file_name))
par(mar=rep(0,4),oma=rep(0,4))
plot(net,vertex.label=NA
, vertex.size= data
, vertex.color="blue"
, edge.color="lightblue"
, edge.width=1
, vertex.frame.color="darkblue"
, edge.arrow.size = 0.5
, main = sprintf('\n\n %s',name))
dev.off()
# Plotting and storing histogram of USpower nodes data
if (do_hist){
nodes <- as.data.frame(nodes) %>%
`colnames<-`(c("value"))
p <- ggplot(nodes,aes(value)) +
ggtitle(name) + xlab("Vulnerability") + ylab("Frequency") +
geom_histogram(binwidth = max(nodes)-min(nodes)/100)
ggsave(filename=sprintf('%s_hist.pdf',file_name),plot=p,device="pdf",path=file_path)
}# if
}# plot_uspower
plot_uspower <- function(net, nodes=NULL,mapping=function(x){x}, file_path="Network-Data/USpower/pdf",file_name="uspower_uu",name="USpower"){
# Data is zero when missing
do_hist <- TRUE
if (is.null(nodes)){
nodes <- vector(mode="numeric", length = vcount(net))
do_hist <- FALSE
}# if
# Making plot of USpower
pdf(file=sprintf('%s/%s_plot.pdf',file_path,file_name))
par(mar=rep(0,4),oma=rep(0,4))
plot(net,vertex.label=NA
, vertex.size= mapping(nodes)
, vertex.color="blue"
, edge.color="lightblue"
, edge.width=1
, vertex.frame.color="darkblue"
, edge.arrow.size = 0.5
, main = sprintf('\n\n %s',name))
dev.off()
# Plotting and storing histogram of USpower nodes data
if (do_hist){
nodes <- as.data.frame(nodes) %>%
`colnames<-`(c("value"))
p <- ggplot(nodes,aes(value)) +
ggtitle(name) + xlab("Vulnerability") + ylab("Frequency") +
geom_histogram(binwidth = max(nodes)-min(nodes)/100)
ggsave(filename=sprintf('%s_hist.pdf',file_name),plot=p,device="pdf",path=file_path)
}# if
}# plot_uspower
plot_uspower(uspower_uu,1:vcount(uspower_uu),function(x){x^2/max(x^2)},name="USpower_example")
plot_uspower(uspower_uu,1:vcount(uspower_uu),function(x){1+x^2/max(x^2)},name="USpower_example")
plot_uspower(uspower_uu,1:vcount(uspower_uu),function(x){1+5*x^2/max(x^2)},name="USpower_example")
plot_uspower(uspower_uu,1:vcount(uspower_uu),function(x){1+5*x^4/max(x^4)},name="USpower_example")
plot_uspower <- function(net, nodes=NULL,mapping=function(x){x}, file_path="Network-Data/USpower/pdf",file_name="uspower_uu",name="USpower"){
# Data is zero when missing
do_hist <- TRUE
if (is.null(nodes)){
nodes <- vector(mode="numeric", length = vcount(net))
do_hist <- FALSE
}# if
# Making plot of USpower
pdf(file=sprintf('%s/%s_plot.pdf',file_path,file_name))
par(mar=rep(0,4),oma=rep(0,4))
plot(net,vertex.label=NA
, vertex.size= mapping(nodes)
, vertex.color="blue"
, edge.color="lightblue"
, edge.width=1
, vertex.frame.color="darkblue"
, edge.arrow.size = 0.5
, main = sprintf('\n\n %s',name))
dev.off()
# Plotting and storing histogram of USpower nodes data
if (do_hist){
nodes <- as.data.frame(nodes) %>%
`colnames<-`(c("value"))
p <- ggplot(nodes,aes(value)) +
ggtitle(name) + xlab("Vulnerability") + ylab("Frequency") +
geom_histogram(binwidth = (max(nodes)-min(nodes))/100)
ggsave(filename=sprintf('%s_hist.pdf',file_name),plot=p,device="pdf",path=file_path)
}# if
}# plot_uspower
plot_uspower(uspower_uu,1:vcount(uspower_uu),function(x){1+5*x^4/max(x^4)},name="USpower_example")
uspower_uu <- read.csv("Network-Data/USpower/cooked_data/edges_uspower.csv") %>%
graph_from_data_frame(,directed=FALSE)
vcount(uspower_uu)
ecount(uspower_uu)
uspower_uu <- read.csv("Network-Data/USpower/cooked_data/edges_uspower.csv") %>%
graph_from_data_frame(,directed=FALSE) %>%
as.undirected(mode="collapse")
vcount(uspower_uu)
ecount(uspower_uu)
uspower_uu <- read.csv("Network-Data/USpower/cooked_data/edges_uspower.csv") %>%
graph_from_data_frame(directed=FALSE) %>%
as.undirected(mode="collapse")
vcount(uspower_uu)
ecount(uspower_uu)
uspower_uu <- read.csv("Network-Data/USpower/cooked_data/edges_uspower.csv") %>%
graph_from_edgelist(directed=FALSE) %>%
as.undirected(mode="collapse")
uspower_uu <- read.csv("Network-Data/USpower/cooked_data/edges_uspower.csv") %>%
as.matrix() %>%
graph_from_edgelist(directed=FALSE) %>%
as.undirected(mode="collapse")
vcount(uspower_uu)
ecount(uspower_uu)
uspower_uu <- read.csv("Network-Data/USpower/cooked_data/edges_uspower.csv")
View(uspower_uu)
uspower_uu <- read.csv("Network-Data/USpower/cooked_data/edges_uspower.csv") %>%
as.matrix()
uspower_uu <- read.csv("Network-Data/USpower/cooked_data/edges_uspower.csv") %>%
as.matrix() %>%
graph_from_edgelist(directed=FALSE)
vcount(uspower_uu)
ecount(uspower_uu)
uspower_uu <- read.csv("Network-Data/USpower/cooked_data/edges_uspower.csv") %>%
as.matrix() %>%
graph_from_edgelist(directed=TRUE) %>%
as.undirected(mode="collapse")
ecount(uspower_uu)
vcount(uspower_uu)
# Calculating and plotting vulnerabilities
nodes_uu <- as.data.frame(V(uspower_uu)$name) %>%
(.$VULNERABILITY <- vulnerability_nodes(cl,uspower_uu,performance=global_efficiency_unpar))
source("system/initialization.R")
source("system/parallell_programming.R")
source("system/functions.R")
source("functions/measures_distance.R")
setwd("functions/OACC");source("scripts/BDM2D.R");setwd("../../")
source("functions/tests_distance.R")
source("functions/analyse.R")
source("Network-Data/USpower/uspower_functions.R")
cl <- start_cluster()
# Calculating and plotting vulnerabilities
nodes_uu <- as.data.frame(V(uspower_uu)$name) %>%
(.$VULNERABILITY <- vulnerability_nodes(cl,uspower_uu,performance=global_efficiency_unpar))
# First we make an edge list, useful for all our graphs
edges_usair <- read.csv("Network-Data/USair/raw_data/flight_data.csv"
, stringsAsFactors = FALSE) %>%
# We only use passenger flights, national airports and no self-loops
filter(PASSENGERS > 0
, ORIGIN_COUNTRY_NAME=="United States"
, DEST_COUNTRY_NAME=="United States"
, !(ORIGIN%in%c("ROR", "AWK", "TIQ", "UAM","PPG","JON"
,"OFU","TAV","FAQ","MDY","SAW","GUM"
,"ROP","SPN"))
, !(DEST%in%c("ROR", "AWK", "TIQ", "UAM","PPG","JON"
,"OFU","TAV","FAQ","MDY","SAW","GUM"
,"ROP","SPN"))
, ORIGIN!=DEST) %>%
# Rest is not usefull anymore
select(PASSENGERS,ORIGIN,DEST) %>%
# We want an edge list with origin - destination - #passengers between these airports
arrange(ORIGIN,DEST) %>%
group_by(ORIGIN,DEST) %>%
summarise(N_PASSENGERS = sum(PASSENGERS, na.rm = TRUE)) %>%
select(ORIGIN,DEST,N_PASSENGERS) %>%
`colnames<-`(c("ORIGIN","DEST","PASSENGERS"))
View(edges_usair)
# A list of nodes with their coordinates, where we only use the airports that are
# in the graph. The following is included: AirportID (AIRPORT), #passengers departing (PASSENGERS)
# latitude (LATITUDE) and longitude (LONGITUDE)
nodes_usair <- read.csv("Network-Data/USair/raw_data/us_coordinates.csv", stringsAsFactors = FALSE) %>%
filter(AIRPORT%in%V(usair_du)$name) %>%
select(AIRPORT,LATITUDE,LONGITUDE) %>%
group_by(AIRPORT) %>%
summarise(LATITUDE = mean(LATITUDE, na.rm = TRUE), LONGITUDE = mean(LONGITUDE, na.rm = TRUE)) %>%
left_join(summarise(group_by(edges_usair,ORIGIN),PASSENGERS = sum(PASSENGERS)), by = c("AIRPORT" = "ORIGIN")) %>%
`colnames<-`(c("FROM","TO","LATITUDE","LONGITUDE","USAGE"))
# Temporary list of airports
nodes_from <- unique(edges_usair$FROM)
colnames(edges_usair) <- c("FROM","TO","USAGE")
# Temporary list of airports
nodes_from <- unique(edges_usair$FROM)
nodes_to <- unique(edges_usair$TO)
nodes_usair <- unique(c(nodes_origin,nodes_dest))
nodes_usair <- unique(c(nodes_from,nodes_to))
# Initializing graph as directed
usair_du <- graph_from_data_frame(edges_usair[,c("FROM","TO")],directed=TRUE,nodes_usair)
vcount(usair_du)
ecount(usair_du)
View(edges_usair)
# Only use the main cluster (measured from Atlanta)
usair_du <- induced_subgraph(edges_usair,vids=ego(usair_du, order=10000,nodes="ATL")[[1]])
# Only use the main cluster (measured from Atlanta)
usair_du <- induced_subgraph(usair_du,vids=ego(usair_du, order=10000,nodes="ATL")[[1]])
vcount(usair_du)
ecount(usair_du)
edges_usair <- filter(edges_usair, FROM%in%V(usair_du)$name, TO%in%V(usair_du)$name) %T>%
write.csv("Network-Data/USair/cooked_data/edges_usair.csv", row.names=FALSE)
# A list of nodes with their coordinates, where we only use the airports that are
# in the graph. The following is included: AirportID (AIRPORT), #passengers departing (PASSENGERS)
# latitude (LATITUDE) and longitude (LONGITUDE)
nodes_usair <- read.csv("Network-Data/USair/raw_data/us_coordinates.csv", stringsAsFactors = FALSE) %>%
filter(AIRPORT%in%V(usair_du)$name) %>%
select(AIRPORT,LATITUDE,LONGITUDE) %>%
group_by(AIRPORT) %>%
summarise(LATITUDE = mean(LATITUDE, na.rm = TRUE), LONGITUDE = mean(LONGITUDE, na.rm = TRUE)) %>%
left_join(summarise(group_by(edges_usair,ORIGIN),PASSENGERS = sum(PASSENGERS)), by = c("AIRPORT" = "ORIGIN")) %>%
`colnames<-`(c("FROM","TO","LATITUDE","LONGITUDE","USAGE"))
# A list of nodes with their coordinates, where we only use the airports that are
# in the graph. The following is included: AirportID (AIRPORT), #passengers departing (PASSENGERS)
# latitude (LATITUDE) and longitude (LONGITUDE)
nodes_usair <- read.csv("Network-Data/USair/raw_data/us_coordinates.csv", stringsAsFactors = FALSE) %>%
filter(AIRPORT%in%V(usair_du)$name) %>%
select(AIRPORT,LATITUDE,LONGITUDE) %>%
group_by(AIRPORT) %>%
summarise(LATITUDE = mean(LATITUDE, na.rm = TRUE), LONGITUDE = mean(LONGITUDE, na.rm = TRUE)) %>%
left_join(summarise(group_by(edges_usair,FROM),PASSENGERS = sum(PASSENGERS)), by = c("AIRPORT" = "FROM")) %>%
`colnames<-`(c("FROM","TO","LATITUDE","LONGITUDE","USAGE"))
# A list of nodes with their coordinates, where we only use the airports that are
# in the graph. The following is included: AirportID (AIRPORT), #passengers departing (PASSENGERS)
# latitude (LATITUDE) and longitude (LONGITUDE)
nodes_usair <- read.csv("Network-Data/USair/raw_data/us_coordinates.csv", stringsAsFactors = FALSE) %>%
filter(AIRPORT%in%V(usair_du)$name) %>%
select(AIRPORT,LATITUDE,LONGITUDE) %>%
group_by(AIRPORT) %>%
summarise(LATITUDE = mean(LATITUDE, na.rm = TRUE), LONGITUDE = mean(LONGITUDE, na.rm = TRUE)) %>%
left_join(summarise(group_by(edges_usair,FROM),USAGE = sum(USAGE)), by = c("AIRPORT" = "FROM")) %>%
`colnames<-`(c("FROM","TO","LATITUDE","LONGITUDE","USAGE"))
nodes_usair <- read.csv("Network-Data/USair/raw_data/us_coordinates.csv", stringsAsFactors = FALSE) %>%
filter(AIRPORT%in%V(usair_du)$name) %>%
select(AIRPORT,LATITUDE,LONGITUDE) %>%
group_by(AIRPORT) %>%
summarise(LATITUDE = mean(LATITUDE, na.rm = TRUE), LONGITUDE = mean(LONGITUDE, na.rm = TRUE)) %>%
left_join(summarise(group_by(edges_usair,FROM),USAGE = sum(USAGE)), by = c("AIRPORT" = "FROM"))
View(nodes_usair)
# A list of nodes with their coordinates, where we only use the airports that are
# in the graph. The following is included: AirportID (AIRPORT), #passengers departing (PASSENGERS)
# latitude (LATITUDE) and longitude (LONGITUDE)
nodes_usair <- read.csv("Network-Data/USair/raw_data/us_coordinates.csv", stringsAsFactors = FALSE) %>%
filter(AIRPORT%in%V(usair_du)$name) %>%
select(AIRPORT,LATITUDE,LONGITUDE) %>%
group_by(AIRPORT) %>%
summarise(LATITUDE = mean(LATITUDE, na.rm = TRUE), LONGITUDE = mean(LONGITUDE, na.rm = TRUE)) %>%
left_join(summarise(group_by(edges_usair,FROM),USAGE = sum(USAGE)), by = c("AIRPORT" = "FROM")) %>%
`colnames<-`(c("NODE","LATITUDE","LONGITUDE","USAGE"))
View(nodes_usair)
nodes_usair$USAGE[is.na(nodes_usair$USAGE)] <- 0
View(nodes_usair)
write.csv(nodes_usair,"Network-Data/USair/cooked_data/nodes_usair.csv",row.names=FALSE)
m <- read.csv(sprintf('Network-Data/USair/cooked_data/%s.csv',name), stringsAsFactors = FALSE) %>%
`row.names<-`(.,.[,1]) %>%
.[,-1]
name <- l_usair
name <- "l_usair"
m <- read.csv(sprintf('Network-Data/USair/cooked_data/%s.csv',name), stringsAsFactors = FALSE) %>%
`row.names<-`(.,.[,1]) %>%
.[,-1]
m <- read.csv(sprintf('Network-Data/USair/cooked_data/%s.csv',name), stringsAsFactors = FALSE) %>%
`row.names<-`(.,colnames(.))
m <- read.csv(sprintf('Network-Data/USair/cooked_data/%s.csv',name), stringsAsFactors = FALSE)
View(m)
load_usair <- function(name){
m <- read.csv(sprintf('Network-Data/USair/cooked_data/%s.csv',name), stringsAsFactors = FALSE) %>%
`row.names<-`(.,.[,1]) %>%
.[,-1] %>%
as.matrix()
colnames(m)[1:2] <- c("1G4","7AK")
return(m)
}# load_usair
l_usair <- load_usair("l_usair")
head(l_usair)
View(l_usair)
# Reading data into R and making it an undirected graph
nodes_uspower <-  read.csv("Network-Data/USpower/raw_data/uspowergrid.csv"
,stringsAsFactors = FALSE) %>%
subset(select = c("V1","V2")) %>%
`colnames<-`(c("FROM","TO")) %>%
as.matrix() %>%
normalize_edgelist() %T>%
write.csv("Network-Data/USpower/cooked_data/edges_uspower.csv",row.names = FALSE) %>%
graph_from_edgelist() %>%
as.undirected(mode="collapse") %T>%
as.data.frame(V(.)$name) %>%
`colnames<-`(c("NODE")) %>%
write.csv("Network-Data/USpower/cooked_data/nodes_uspower.csv", row.names=FALSE)
# Reading data into R and making it an undirected graph
nodes_uspower <-  read.csv("Network-Data/USpower/raw_data/uspowergrid.csv"
,stringsAsFactors = FALSE) %>%
subset(select = c("V1","V2")) %>%
`colnames<-`(c("FROM","TO")) %>%
as.matrix() %>%
normalize_edgelist() %T>%
write.csv("Network-Data/USpower/cooked_data/edges_uspower.csv",row.names = FALSE) %>%
graph_from_edgelist() %>%
as.undirected(mode="collapse") %>%
as.data.frame(V(.)$name) %>%
`colnames<-`(c("NODE")) %>%
write.csv("Network-Data/USpower/cooked_data/nodes_uspower.csv", row.names=FALSE)
# Reading data into R and making it an undirected graph
uspower_uu <-  read.csv("Network-Data/USpower/raw_data/uspowergrid.csv"
,stringsAsFactors = FALSE) %>%
subset(select = c("V1","V2")) %>%
`colnames<-`(c("FROM","TO")) %>%
as.matrix() %>%
normalize_edgelist() %T>%
write.csv("Network-Data/USpower/cooked_data/edges_uspower.csv",row.names = FALSE) %>%
graph_from_edgelist() %>%
as.undirected(mode="collapse")
# The node list of uspower
nodes_uspower <- as.data.frame(V(uspower_uu)$name) %>%
`colnames<-`(c("NODE")) %>%
write.csv("Network-Data/USpower/cooked_data/nodes_uspower.csv", row.names=FALSE)
V(uspower_uu)$name
vcount(uspower_uu)
# The node list of uspower
nodes_uspower <- as.data.frame(1:vcount(uspower_uu)) %>%
`colnames<-`(c("NODE")) %>%
write.csv("Network-Data/USpower/cooked_data/nodes_uspower.csv", row.names=FALSE)
nordirectors_uu <-  read.table("http://www.boardsandgender.com/data/net1m/net1m_2011-08-01.txt"
,stringsAsFactors = FALSE)
nordirectors_uu <-  read.table("http://www.boardsandgender.com/data/net1m/net1m_2011-08-01.txt"
,stringsAsFactors = FALSE) %>%
`colnames<-`(c("FROM","TO"))
# Reading data into R and making it a directed graph
edges_nordirectors <-  read.table("http://www.boardsandgender.com/data/net1m/net1m_2011-08-01.txt"
,stringsAsFactors = FALSE) %>%
`colnames<-`(c("FROM","TO"))
# Reading data into R and making it an undirected graph
nordirectors_uu <-  read.table("http://www.boardsandgender.com/data/net1m/net1m_2011-08-01.txt"
,stringsAsFactors = FALSE) %>%
`colnames<-`(c("FROM","TO")) %T>%
write.csv("Network-Data/NORdirectors/cooked_data/edges_nordirectors.csv",row.names=FALSE) %>%
# Undirected graph
as.matrix() %>%
graph_from_edgelist() %>%
as.undirected(mode="collapse")
V(nordirectors_uu)$name
# Reading data into R and making it an undirected graph
nordirectors_uu <-  read.table("http://www.boardsandgender.com/data/net1m/net1m_2011-08-01.txt"
,stringsAsFactors = FALSE) %>%
`colnames<-`(c("FROM","TO")) %T>%
write.csv("Network-Data/NORdirectors/cooked_data/edges_nordirectors.csv",row.names=FALSE) %>%
# Undirected graph and take largest cluster
as.matrix() %>%
graph_from_edgelist() %>%
as.undirected(mode="collapse") %>%
make_ego_graph(order=10000,nodes=c(3),mode="all")[[1]]
# Reading data into R and making it an undirected graph
nordirectors_uu <-  read.table("http://www.boardsandgender.com/data/net1m/net1m_2011-08-01.txt"
,stringsAsFactors = FALSE) %>%
`colnames<-`(c("FROM","TO")) %T>%
write.csv("Network-Data/NORdirectors/cooked_data/edges_nordirectors.csv",row.names=FALSE) %>%
# Undirected graph and take largest cluster
as.matrix() %>%
graph_from_edgelist() %>%
as.undirected(mode="collapse") %>%
make_ego_graph(.,order=10000,nodes=c(3),mode="all")[[1]]
# Reading data into R and making it an undirected graph
nordirectors_uu <-  read.table("http://www.boardsandgender.com/data/net1m/net1m_2011-08-01.txt"
,stringsAsFactors = FALSE) %>%
`colnames<-`(c("FROM","TO")) %T>%
write.csv("Network-Data/NORdirectors/cooked_data/edges_nordirectors.csv",row.names=FALSE) %>%
# Undirected graph and take largest cluster
as.matrix() %>%
graph_from_edgelist() %>%
as.undirected(mode="collapse") %>%
make_ego_graph(g=.,order=10000,nodes=c(3),mode="all")[[1]]
# Reading data into R and making it an undirected graph
nordirectors_uu <-  read.table("http://www.boardsandgender.com/data/net1m/net1m_2011-08-01.txt"
,stringsAsFactors = FALSE) %>%
`colnames<-`(c("FROM","TO")) %T>%
write.csv("Network-Data/NORdirectors/cooked_data/edges_nordirectors.csv",row.names=FALSE) %>%
# Undirected graph
as.matrix() %>%
graph_from_edgelist() %>%
as.undirected(mode="collapse")
# Taking largest cluster
nordirectors_uu <- make_ego_graph(nordirectors_uu,order=10000,nodes=c(3),mode="all")[[1]]
