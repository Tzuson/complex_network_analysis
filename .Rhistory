source("functions/tests.R")
source("NSnet/nsnet.R")
adj_matrix <- t(matrix(c(0,1,1,0,
1,0,1,0,
1,1,0,0,
1,0,1,0),
nrow=4, ncol=4))
l_matrix <- t(matrix(c(0,1,10,1,
1,0,1,1,
1,1,0,1,
1,1,1,0),
nrow=4, ncol=4))
g <- graph_from_adjacency_matrix(adj_matrix, mode="directed", weighted=TRUE)
plot(g)
local_efficiency_generalised <- function(cl,g,c_neighbors){
n <- vcount(g)
d_g <- distances(g,v=V(g),to=V(g),mode="out", weights=TRUE)
d_neighbors <- parSapply(cl,1:n, function(j,g,d_g,c_neighbors,n){
sapply(1:n, function(i,j,g,d_g,c_neighbors){
if (d_g[i,j]<c_neighbors){
return(TRUE)
}# if
else {
return(FALSE)
}# else
},j,g,d_g,c_neighbors)# sapply
},g,d_g,c_neighbors,n)# parSapply
}# local_efficiency_generalised
cl <- start_cluster()
test <- local_efficiency_generalised(cl,g,2)
print(test)
local_efficiency_generalised <- function(cl,g,c_neighbors){
n <- vcount(g)
d_g <- distances(g,v=V(g),to=V(g),mode="out")
d_neighbors <- parSapply(cl,1:n, function(j,g,d_g,c_neighbors,n){
sapply(1:n, function(i,j,g,d_g,c_neighbors){
if (d_g[i,j]<c_neighbors){
return(TRUE)
}# if
else {
return(FALSE)
}# else
},j,g,d_g,c_neighbors)# sapply
},g,d_g,c_neighbors,n)# parSapply
}# local_efficiency_generalised
print(distances(g,v=V(g),to=V(g),mode="out"))
test <- local_efficiency_generalised(cl,g,2)
print(test)
source("system/initialization.R")
source("system/parallell_programming.R")
source("functions/functions.R")
source("functions/measures.R")
source("functions/tests.R")
source("NSnet/nsnet.R")
adj_matrix <- t(matrix(c(0,1,1,0,
1,0,1,0,
1,1,0,0,
1,0,1,0),
nrow=4, ncol=4))
l_matrix <- t(matrix(c(0,1,10,1,
1,0,1,1,
1,1,0,1,
1,1,1,0),
nrow=4, ncol=4))
g <- graph_from_adjacency_matrix(adj_matrix*l_matrix, mode="directed", weighted=TRUE)
plot(g)
local_efficiency_generalised <- function(cl,g,c_neighbors){
n <- vcount(g)
d_g <- distances(g,v=V(g),to=V(g),mode="out")
d_neighbors <- parSapply(cl,1:n, function(j,g,d_g,c_neighbors,n){
sapply(1:n, function(i,j,g,d_g,c_neighbors){
if (d_g[i,j]<c_neighbors){
return(TRUE)
}# if
else {
return(FALSE)
}# else
},j,g,d_g,c_neighbors)# sapply
},g,d_g,c_neighbors,n)# parSapply
}# local_efficiency_generalised
print(distances(g,v=V(g),to=V(g),mode="out"))
test <- local_efficiency_generalised(cl,g,2)
print(test)
local_efficiency_generalised <- function(cl,g,c_neighbors){
n <- vcount(g)
d_g <- distances(g,v=V(g),to=V(g),mode="out")
d_neighbors <- parSapply(cl,1:n, function(node,g,d_g,c_neighbors,n){
node_neighbors <- c()
for (nb in 1:n){
if (d_g[node,nb] < c_neighbors && !(node==nb)){
node_neighbors <- c(node_neighbors,nb)
}# if
}# for
subg <- induced_subgraph(g,node_neighbors)
global_efficiency(cl,subg)
},g,d_g,c_neighbors,n)# parSapply
}# local_efficiency_generalised
print(distances(g,v=V(g),to=V(g),mode="out"))
test <- local_efficiency_generalised(cl,g,2)
print(test)
cl <- stop_cluster()
cl <- stop_cluster(cl)
cl <- start_cluster(sources=c("system/initialization.R","functions/measures.R"))
print(distances(g,v=V(g),to=V(g),mode="out"))
test <- local_efficiency_generalised(cl,g,2)
print(test)
test2 <- local_efficiency(cl,g)
print(test2)
test <- local_efficiency_generalised(cl,g,2)
print(test)
local_efficiency_generalised <- function(cl,g,c_neighbors){
n <- vcount(g)
d_g <- distances(g,v=V(g),to=V(g),mode="out")
d_neighbors <- parSapply(cl,1:n, function(node,g,d_g,c_neighbors,n){
node_neighbors <- c()
for (nb in 1:n){
if (d_g[node,nb] < c_neighbors && !(node==nb)){
node_neighbors <- c(node_neighbors,nb)
}# if
}# for
print(node_neighbors)
subg <- induced_subgraph(g,node_neighbors)
global_efficiency(cl,subg)
},g,d_g,c_neighbors,n)# parSapply
}# local_efficiency_generalised
print(distances(g,v=V(g),to=V(g),mode="out"))
test <- local_efficiency_generalised(cl,g,2)
print(test)
test2 <- local_efficiency(cl,g)
print(test2)
n <- vcount(g)
c_neighbors <- 2
d_g <- distances(g,v=V(g),to=V(g),mode="out")
d_neighbors <- parSapply(cl,1:n, function(node,g,d_g,c_neighbors,n){
node_neighbors <- c()
for (nb in 1:n){
if (d_g[node,nb] < c_neighbors && !(node==nb)){
node_neighbors <- c(node_neighbors,nb)
}# if
}# for
print(node_neighbors)
subg <- induced_subgraph(g,node_neighbors)
global_efficiency(cl,subg)
},g,d_g,c_neighbors,n)# parSapply
n <- vcount(g)
c_neighbors <- 2
d_g <- distances(g,v=V(g),to=V(g),mode="out")
eff <- parSapply(cl,1:n, function(node,g,d_g,c_neighbors,n){
node_neighbors <- c()
for (nb in 1:n){
if (d_g[node,nb] < c_neighbors && !(node==nb)){
node_neighbors <- c(node_neighbors,nb)
}# if
}# for
print(node_neighbors)
subg <- induced_subgraph(g,node_neighbors)
global_efficiency(cl,subg)
},g,d_g,c_neighbors,n)# parSapply
adj_matrix <- t(matrix(c(0,1,1,0,
1,0,1,0,
1,1,0,0,
1,0,1,0),
nrow=4, ncol=4))
l_matrix <- t(matrix(c(0,1,1,1,
1,0,1,1,
1,1,0,1,
1,1,1,0),
nrow=4, ncol=4))
g <- graph_from_adjacency_matrix(adj_matrix*l_matrix, mode="directed", weighted=TRUE)
plot(g)
print(distances(g,v=V(g),to=V(g),mode="out"))
test <- local_efficiency_generalised(cl,g,2)
print(test)
test2 <- local_efficiency(cl,g)
print(test2)
adj_matrix <- t(matrix(c(0,1,1,0,
1,0,1,0,
1,1,0,0,
1,0,1,0),
nrow=4, ncol=4))
l_matrix <- t(matrix(c(0,1,10,1,
1,0,1,1,
1,1,0,1,
1,1,1,0),
nrow=4, ncol=4))
g <- graph_from_adjacency_matrix(adj_matrix*l_matrix, mode="directed", weighted=TRUE)
plot(g)
print(distances(g,v=V(g),to=V(g),mode="out"))
test <- local_efficiency_generalised(cl,g,2)
print(test)
test2 <- local_efficiency(cl,g)
print(test2)
local_efficiency_generalised <- function(cl,g,c_neighbors,l){
n <- vcount(g)
d_g <- distances(g,v=V(g),to=V(g),mode="out")
eff <- parSapply(cl,1:n, function(node,g,d_g,c_neighbors,n,l){
node_neighbors <- c()
for (nb in 1:n){
if (d_g[node,nb] < c_neighbors && !(node==nb)){
node_neighbors <- c(node_neighbors,nb)
}# if
}# for
print(node_neighbors)
subg <- induced_subgraph(g,node_neighbors)
subl <- l[-node_neighbors,-node_neighbors]
global_efficiency(cl,subg,subl)
},g,d_g,c_neighbors,n)# parSapply
return(eff)
}# local_efficiency_generalised
print(distances(g,v=V(g),to=V(g),mode="out"))
test <- local_efficiency_generalised(cl,g,2)
print(test)
test2 <- local_efficiency(cl,g)
print(test2)
print(distances(g,v=V(g),to=V(g),mode="out"))
test <- local_efficiency_generalised(cl,g,2,l_matrix)
print(test)
test2 <- local_efficiency(cl,g)
print(test2)
cl <- stop_cluster(cl)
source("system/initialization.R")
source("system/parallell_programming.R")
source("functions/functions.R")
source("functions/measures.R")
source("functions/tests.R")
source("NSnet/nsnet.R")
adj_matrix <- t(matrix(c(0,1,1,0,
1,0,1,0,
1,1,0,0,
1,0,1,0),
nrow=4, ncol=4))
l_matrix <- t(matrix(c(0,1,10,1,
1,0,1,1,
1,1,0,1,
1,1,1,0),
nrow=4, ncol=4))
g <- graph_from_adjacency_matrix(adj_matrix*l_matrix, mode="directed", weighted=TRUE)
plot(g)
local_efficiency_generalised <- function(cl,g,c_neighbors,l){
n <- vcount(g)
d_g <- distances(g,v=V(g),to=V(g),mode="out")
eff <- parSapply(cl,1:n, function(node,g,d_g,c_neighbors,n,l){
node_neighbors <- c()
for (nb in 1:n){
if (d_g[node,nb] < c_neighbors && !(node==nb)){
node_neighbors <- c(node_neighbors,nb)
}# if
}# for
print(node_neighbors)
subg <- induced_subgraph(g,node_neighbors)
subl <- l[-node_neighbors,-node_neighbors]
global_efficiency(cl,subg,subl)
},g,d_g,c_neighbors,n)# parSapply
return(eff)
}# local_efficiency_generalised
cl <- start_cluster(sources=c("system/initialization.R","functions/measures.R"))
print(distances(g,v=V(g),to=V(g),mode="out"))
test <- local_efficiency_generalised(cl,g,2,l_matrix)
print(test)
test2 <- local_efficiency(cl,g)
print(test2)
print(distances(g,v=V(g),to=V(g),mode="out"))
test1 <- local_efficiency_generalised(cl,g,2,l_matrix)
print(test1)
test2 <- local_efficiency(cl,g,l_matrix)
print(test2)
local_efficiency_generalised <- function(cl,g,c_neighbors,l){
n <- vcount(g)
d_g <- distances(g,v=V(g),to=V(g),mode="out")
eff <- parSapply(cl,1:n, function(node,g,d_g,c_neighbors,n,l){
node_neighbors <- c()
for (nb in 1:n){
if (d_g[node,nb] < c_neighbors && !(node==nb)){
node_neighbors <- c(node_neighbors,nb)
}# if
}# for
print(node_neighbors)
subg <- induced_subgraph(g,node_neighbors)
subl <- l[-node_neighbors,-node_neighbors]
global_efficiency(cl,subg,subl)
},g,d_g,c_neighbors,n)# parSapply
return(eff)
}# local_efficiency_generalised
print(distances(g,v=V(g),to=V(g),mode="out"))
test1 <- local_efficiency_generalised(cl,g,2,l_matrix)
print(test1)
test2 <- local_efficiency(cl,g,l_matrix)
print(test2)
test1 <- local_efficiency_generalised(cl,g,2,l_matrix)
test1 <- local_efficiency_generalised(cl,g,2,l=l_matrix)
local_efficiency_generalised <- function(cl,g,c_neighbors,l){
n <- vcount(g)
d_g <- distances(g,v=V(g),to=V(g),mode="out")
eff <- parSapply(cl,1:n, function(node,g,d_g,c_neighbors,n,l){
node_neighbors <- c()
for (nb in 1:n){
if (d_g[node,nb] < c_neighbors && !(node==nb)){
node_neighbors <- c(node_neighbors,nb)
}# if
}# for
print(node_neighbors)
subg <- induced_subgraph(g,node_neighbors)
subl <- l[-node_neighbors,-node_neighbors]
global_efficiency(cl,subg,l=subl)
},g,d_g,c_neighbors,n)# parSapply
return(eff)
}# local_efficiency_generalised
print(distances(g,v=V(g),to=V(g),mode="out"))
test1 <- local_efficiency_generalised(cl,g,2,l=l_matrix)
test2 <- local_efficiency(cl,g,l_matrix)
print(test2)
local_efficiency_generalised <- function(cl,g,c_neighbors,l){
n <- vcount(g)
d_g <- distances(g,v=V(g),to=V(g),mode="out")
eff <- parSapply(cl,1:n, function(node,g,d_g,c_neighbors,n,l){
node_neighbors <- c()
for (nb in 1:n){
if (d_g[node,nb] < c_neighbors && !(node==nb)){
node_neighbors <- c(node_neighbors,nb)
}# if
}# for
print(node_neighbors)
subg <- induced_subgraph(g,node_neighbors)
subl <- l[-node_neighbors,-node_neighbors]
global_efficiency(cl,subg,l=subl)
},g,d_g,c_neighbors,n,l)# parSapply
return(eff)
}# local_efficiency_generalised
print(distances(g,v=V(g),to=V(g),mode="out"))
test1 <- local_efficiency_generalised(cl,g,2,l_matrix)
print(test1)
test2 <- local_efficiency(cl,g,l_matrix)
print(test2)
adj_matrix <- t(matrix(c(0,1,1,0,
1,0,1,0,
1,1,0,0,
1,0,1,0),
nrow=4, ncol=4))
l_matrix <- t(matrix(c(0,1,2,1,
1,0,1,1,
1,1,0,1,
1,1,1,0),
nrow=4, ncol=4))
g <- graph_from_adjacency_matrix(adj_matrix*l_matrix, mode="directed", weighted=TRUE)
plot(g)
g <- graph_from_adjacency_matrix(adj_matrix*l_matrix, mode="directed", weighted=TRUE)
plot(g)
local_efficiency_generalised <- function(cl,g,c_neighbors,l){
n <- vcount(g)
d_g <- distances(g,v=V(g),to=V(g),mode="out")
eff <- parSapply(cl,1:n, function(node,g,d_g,c_neighbors,n,l){
node_neighbors <- c()
for (nb in 1:n){
if (d_g[node,nb] < c_neighbors && !(node==nb)){
node_neighbors <- c(node_neighbors,nb)
}# if
}# for
print(node_neighbors)
subg <- induced_subgraph(g,node_neighbors)
subl <- l[-node_neighbors,-node_neighbors]
global_efficiency(cl,subg,l=subl)
},g,d_g,c_neighbors,n,l)# parSapply
return(eff)
}# local_efficiency_generalised
print(distances(g,v=V(g),to=V(g),mode="out"))
test1 <- local_efficiency_generalised(cl,g,2,l_matrix)
print(test1)
test2 <- local_efficiency(cl,g,l_matrix)
print(test2)
n <- vcount(g)
c_neighbors <- 2
d_g <- distances(g,v=V(g),to=V(g),mode="out")
eff <- parSapply(cl,1:n, function(node,g,d_g,c_neighbors,n,l){
node_neighbors <- c()
for (nb in 1:n){
if (d_g[node,nb] < c_neighbors && !(node==nb)){
node_neighbors <- c(node_neighbors,nb)
}# if
}# for
print(node_neighbors)
subg <- induced_subgraph(g,node_neighbors)
subl <- l[-node_neighbors,-node_neighbors]
global_efficiency(cl,subg,l=subl)
},g,d_g,c_neighbors,n,l)# parSapply
l <- l_matrix
d_g <- distances(g,v=V(g),to=V(g),mode="out")
eff <- parSapply(cl,1:n, function(node,g,d_g,c_neighbors,n,l){
node_neighbors <- c()
for (nb in 1:n){
if (d_g[node,nb] < c_neighbors && !(node==nb)){
node_neighbors <- c(node_neighbors,nb)
}# if
}# for
print(node_neighbors)
subg <- induced_subgraph(g,node_neighbors)
subl <- l[-node_neighbors,-node_neighbors]
global_efficiency(cl,subg,l=subl)
},g,d_g,c_neighbors,n,l)# parSapply
print(eff)
node_neighbors <- c()
for (nb in 1:n){
if (d_g[node,nb] < c_neighbors && !(node==nb)){
node_neighbors <- c(node_neighbors,nb)
print(node_neighbors)
}# if
}# for
for (nb in 1:n){
if (d_g[1,nb] < c_neighbors && !(1==nb)){
node_neighbors <- c(node_neighbors,nb)
print(node_neighbors)
}# if
}# for
cl <- stop_cluster(cl)
source("system/initialization.R")
source("system/parallell_programming.R")
source("functions/functions.R")
source("functions/measures.R")
source("functions/tests.R")
source("NSnet/nsnet.R")
adj_matrix <- t(matrix(c(0,1,1,0,
1,0,1,0,
1,1,0,0,
1,0,1,0),
nrow=4, ncol=4))
l_matrix <- t(matrix(c(0,1,2,1,
1,0,1,1,
1,1,0,1,
1,1,1,0),
nrow=4, ncol=4))
g <- graph_from_adjacency_matrix(adj_matrix*l_matrix, mode="directed", weighted=TRUE)
plot(g)
local_efficiency_generalised <- function(cl,g,c_neighbors,l){
n <- vcount(g)
d_g <- distances(g,v=V(g),to=V(g),mode="out")
eff <- parSapply(cl,1:n, function(node,g,d_g,c_neighbors,n,l){
node_neighbors <- c()
for (nb in 1:n){
if (d_g[node,nb] < c_neighbors && !(node==nb)){
node_neighbors <- c(node_neighbors,nb)
}# if
}# for
print(node_neighbors)
subg <- induced_subgraph(g,node_neighbors)
subl <- l[-node_neighbors,-node_neighbors]
global_efficiency(cl,subg,l=subl)
},g,d_g,c_neighbors,n,l)# parSapply
return(eff)
}# local_efficiency_generalised
cl <- start_cluster(sources=c("system/initialization.R","functions/measures.R"))
print(distances(g,v=V(g),to=V(g),mode="out"))
test1 <- local_efficiency_generalised(cl,g,3,l_matrix)
print(test1)
test2 <- local_efficiency(cl,g,l_matrix)
print(test2)
source("system/initialization.R")
source("system/parallell_programming.R")
source("functions/functions.R")
source("functions/measures.R")
source("functions/tests.R")
source("NSnet/nsnet.R")
adj_matrix <- t(matrix(c(0,1,1,0,
1,0,1,0,
1,1,0,0,
1,0,1,0),
nrow=4, ncol=4))
l_matrix <- t(matrix(c(0,1,2,1,
1,0,1,1,
1,1,0,1,
1,1,1,0),
nrow=4, ncol=4))
g <- graph_from_adjacency_matrix(adj_matrix*l_matrix, mode="directed", weighted=TRUE)
plot(g)
local_efficiency_generalised <- function(cl,g,c_neighbors,l){
n <- vcount(g)
d_g <- distances(g,v=V(g),to=V(g),mode="out")
eff <- parSapply(cl,1:n, function(node,g,d_g,c_neighbors,n,l){
node_neighbors <- c()
for (nb in 1:n){
if (d_g[node,nb] < c_neighbors && !(node==nb)){
node_neighbors <- c(node_neighbors,nb)
}# if
}# for
subg <- induced_subgraph(g,node_neighbors)
subl <- l[-node_neighbors,-node_neighbors]
global_efficiency(cl,subg,l=subl)
},g,d_g,c_neighbors,n,l)# parSapply
return(eff)
}# local_efficiency_generalised
cl <- start_cluster(sources=c("system/initialization.R","functions/measures.R"))
print(distances(g,v=V(g),to=V(g),mode="out"))
test1 <- local_efficiency_generalised(cl,g,3,l_matrix)
local_efficiency_generalised <- function(cl,g,c_neighbors,l){
n <- vcount(g)
d_g <- distances(g,v=V(g),to=V(g),mode="out")
eff <- parSapply(cl,1:n, function(node,g,d_g,c_neighbors,n,l){
node_neighbors <- c()
for (nb in 1:n){
if (d_g[node,nb] < c_neighbors && !(node==nb)){
node_neighbors <- c(node_neighbors,nb)
}# if
}# for
subg <- induced_subgraph(g,node_neighbors)
subl <- l[-node_neighbors,-node_neighbors]
global_efficiency(cl,subg,subl)
},g,d_g,c_neighbors,n,l)# parSapply
test1 <- local_efficiency_generalised(cl,g,3,l_matrix)
print(test1)
test1 <- local_efficiency_generalised(cl,g,3,l_matrix)
print(test1)
print(1+1)
print("Test")
print(distances(g,v=V(g),to=V(g),mode="out"))
