#' @param g A graph
#' @param performance A function
#' @return Graph characterization numbers (vector)
#' @details
#' The characterizations are: global and local efficiency, global and local efficacy,
#' vulnerability of nodes and edges, and topological information content
measures <- function(g,performance){
c(
global_efficiency = global_efficiency(g)
, local_efficiency = mean(local_efficiency(g))
#, global_efficacy = global_efficacy(g)
#, local_efficacy  = mean(local_efficacy(g))
, vulnerability_nodes = max(vulnerability_nodes(g,performance))
, vulnerability_edges = max(vulnerability_edges(g,performance))
, topological_information_content = information_content(g)
)
}# measures(g,performance)
source("initialization.R")
source("functions/measures.R")
source("data/nsnet.R")
testgraph <- graph_from_literal(A-B-C-D-B)
plot(testgraph)
global_efficiency(testgraph)
a <- igraph::distance_table(testgraph)$res
# Used packages
suppressPackageStartupMessages({
library(igraph)
library(tidyr)
library(dplyr)
library(tidyverse)
library(magrittr)
library(stringdist)
library(rvest)
library(xml2)
})
source("initialization.R")
# Initialize graph
trajecten <- read.csv("data/trajecten.csv",stringsAsFactors = FALSE)
stations <-  read.csv("data/trajecten_stations.csv",stringsAsFactors = FALSE)
nsnet <- graph_from_data_frame(trajecten,directed=FALSE,vertices=stations)
L <- components(g)
#' Plot graph of nsnet
#'
#' @param data Data on nodes
#' @return A pdf with a plot of nsnet
nsnet_plot <- function(data){
nsrblauw <- "#003373"
nsgeel <- "#f7d417"
#pdf("nsnet.pdf")
set.seed(3)
par(mar=rep(0,4),oma=rep(0,4))
plot(nsnet,vertex.label=NA
, vertex.size=2 + data
, vertex.color=nsgeel
, edge.color=nsrblauw
, vertex.frame.color=nsrblauw)
dev.off()
}# nsnet_plot(data)
nsnet_plot(0)
source("initialization.R")
#' Harmonic function
#'
#' @param n A natural number more then zero
#' @return The number 1/1 + ... + 1/n
harmonic <- function(n){
sum(1/seq_len(n))
}# harmonic(n)
source("initialization.R")
source("functions/functions.R")
# Assumption: g a simple, connected, undirected and unweighted graph
#' Efficiency of a graph, according to Latora (2001)
#'
#' @param g A graph
#' @return The global efficiency (number)
global_efficiency <- function(g){
n <- length(V(g))
if (n >= 2){
nd <- igraph::distance_table(g)$res
d <- seq_along(nd)
return(2*sum(nd/d)/(n*(n-1)))
}# if (n>0)
else {
return(0)
}# else
}# global_efficiency(g)
#' Local efficiency of the nodes of a graph
#'
#' @param g A graph
#' @return The local efficiencies of nodes (vector)
local_efficiency <- function(g){
sapply(V(g),function(node){
h <- induced_subgraph(g,c(neighbors(g,node)))
global_efficiency(h)
})
}# local_efficiency(g)
#' Network vulnerability per node, according to Gol'dshtein (2004) and
#' Latora et al (2005).
#'
#' @param g A graph
#' @param performance A function
#' @return The vulnerabilities of nodes (vector)
vulnerability_nodes <- function(g, performance){
nodes <- V(g)
sapply(seq_along(nodes), function(i){
h <- induced_subgraph(g, nodes[-i])
1-performance(h)/performance(g)
})
}# vulnerability_nodes(g, performance)
#' Network vulnerability per edge, according to Gol'dshtein (2004) and
#' Latora et al (2005).
#'
#' @param g A graph
#' @param performance A function
#' @return The vulnerabilities of edges (vector)
vulnerability_edges <- function(g, performance){
edges <- E(g)
sapply(seq_along(edges), function(i){
h <- subgraph.edges(g, edges[-i], delete.vertices = FALSE)
1-performance(h)/performance(g)
})
}# vulnerability_edges(g, performance)
#' Topological information content
#'
#' @param g A graph
#' @return The topological information content (number)
#' @details
#' The topological information content is defined as
#' the logarithm of the size of the automorphism group to the base of 2.
information_content <- function(g){
log2(as.numeric(igraph::automorphisms(g)$group_size))
}# information_content(g)
#' Global efficacy of a graph
#'
#' @param g A graph
#' @return The global efficacy (number)
#' @details:
#' The global efficacy of a graph is the sum over inverse shortest path lengths,
#' multiplied with the number of shortest paths, divided by n(n-1).
#' (van der Loo, 2018)
global_efficacy <- function(g){
nodes <- seq_along(V(g))
n <- length(nodes)
out <- sapply(nodes[-1],function(i){
a <- sapply(seq_len(i-1), function(j){
L <- igraph::all_shortest_paths(g,from=i, to=j)
mu <- length(L$res)
len <- length(L$res[[1]])-1L
c(mu=mu,len=len)
})
sum(a[1,]/a[2,])
})
return(2*sum(out)/(n*(n-1)))
}# global_efficacy(g)
#' The local efficacy
#'
#' @param g A graph
#' @return The local efficiencies of nodes (vector)
local_efficacy <- function(g){
sapply(V(g),function(node){
h <- induced_subgraph(g,c(neighbors(g,node)))
return(global_efficacy(h))
})
}# local_efficacy(g)
#' Return a vector of graph characterization
#'
#' @param g A graph
#' @param performance A function
#' @return Graph characterization numbers (vector)
#' @details
#' The characterizations are: global and local efficiency, global and local efficacy,
#' vulnerability of nodes and edges, and topological information content
measures <- function(g,performance){
c(
global_efficiency = global_efficiency(g)
, local_efficiency = mean(local_efficiency(g))
#, global_efficacy = global_efficacy(g)
#, local_efficacy  = mean(local_efficacy(g))
, vulnerability_nodes = max(vulnerability_nodes(g,performance))
, vulnerability_edges = max(vulnerability_edges(g,performance))
, topological_information_content = information_content(g)
)
}# measures(g,performance)
source("initialization.R")
source("functions/measures.R")
source("data/nsnet.R")
testgraph <- graph_from_literal(A-B-C-D-B)
plot(testgraph)
global_efficiency(testgraph)
a <- igraph::distance_table(testgraph)$res
source("initialization.R")
source("data/nsnet.R")
source("functions/functions.R")
source("functions/measures.R")
#measures(nsnet,global_efficiency)
#nsnet_plot(3*local_efficiency(nsnet))
a <- local_efficiency(nsnet)
station_max <- which.max(a)
print(stations$naam[station_max])
print(stations$naam[which.max(a[-station_max])])
nsnet_plot(6*a)
source("initialization.R")
source("data/nsnet.R")
source("functions/functions.R")
source("functions/measures.R")
#measures(nsnet,global_efficiency)
#nsnet_plot(3*local_efficiency(nsnet))
a <- local_efficiency(nsnet)
station_max <- which.max(a)
print(stations$naam[station_max])
print(stations$naam[which.max(a[-station_max])])
nsrblauw <- "#003373"
nsgeel <- "#f7d417"
#pdf("nsnet.pdf")
set.seed(3)
par(mar=rep(0,4),oma=rep(0,4))
plot(nsnet,vertex.label=NA
, vertex.size=2 + 6*a
, vertex.color=nsgeel
, edge.color=nsrblauw
, vertex.frame.color=nsrblauw)
dev.off()
source("initialization.R")
# Initialize graph
trajecten <- read.csv("data/trajecten.csv",stringsAsFactors = FALSE)
stations <-  read.csv("data/trajecten_stations.csv",stringsAsFactors = FALSE)
nsnet <- graph_from_data_frame(trajecten,directed=FALSE,vertices=stations)
L <- components(g)
#' Plot graph of nsnet
#'
#' @param data Data on nodes
#' @return A pdf with a plot of nsnet
nsnet_plot <- function(data){
nsrblauw <- "#003373"
nsgeel <- "#f7d417"
pdf("nsnet.pdf")
set.seed(3)
par(mar=rep(0,4),oma=rep(0,4))
plot(nsnet,vertex.label=NA
, vertex.size=2 + data
, vertex.color=nsgeel
, edge.color=nsrblauw
, vertex.frame.color=nsrblauw)
dev.off()
}# nsnet_plot(data)
nsnet_plot(0)
nsnet_plot(6*a)
source("initialization.R")
source("data/nsnet.R")
source("functions/functions.R")
source("functions/measures.R")
#measures(nsnet,global_efficiency)
#nsnet_plot(3*local_efficiency(nsnet))
a <- local_efficiency(nsnet)
station_max <- which.max(a)
print(stations$naam[station_max])
print(stations$naam[which.max(a[-station_max])])
nsnet_plot(6*a)
source("initialization.R")
source("data/nsnet.R")
source("functions/functions.R")
source("functions/measures.R")
#measures(nsnet,global_efficiency)
#nsnet_plot(3*local_efficiency(nsnet))
a <- local_efficiency(nsnet)
station_max <- which.max(a)
print(stations$naam[station_max])
print(stations$naam[which.max(a[-station_max])])
nsnet_plot(6*a)
a <- vulnerability_nodes(nsnet, global_efficiency())
print(stations$naam[which.max(a)])
nsnet_plot(6*a)
a <- vulnerability_nodes(nsnet, global_efficiency)
print(stations$naam[which.max(a)])
nsnet_plot(6*a)
a <- vulnerability_nodes(nsnet, global_efficiency)
print(stations$naam[which.max(a)])
nsnet_plot(10*a)
source("initialization.R")
# Initialize graph
trajecten <- read.csv("data/trajecten.csv",stringsAsFactors = FALSE)
stations <-  read.csv("data/trajecten_stations.csv",stringsAsFactors = FALSE)
nsnet <- graph_from_data_frame(trajecten,directed=FALSE,vertices=stations)
L <- components(g)
#' Plot graph of nsnet
#'
#' @param data Data on nodes
#' @return A pdf with a plot of nsnet
nsnet_plot <- function(nodes_data = 0, edges_data = 0){
nsrblauw <- "#003373"
nsgeel <- "#f7d417"
pdf("nsnet.pdf")
set.seed(3)
par(mar=rep(0,4),oma=rep(0,4))
plot(nsnet,vertex.label=NA
, vertex.size=2 + nodes_data
, vertex.color=nsgeel
, edge.color=nsrblauw
, edge.size=1 + edge_data
, vertex.frame.color=nsrblauw)
dev.off()
}# nsnet_plot(data)
nsnet_plot(0)
source("initialization.R")
# Initialize graph
trajecten <- read.csv("data/trajecten.csv",stringsAsFactors = FALSE)
stations <-  read.csv("data/trajecten_stations.csv",stringsAsFactors = FALSE)
nsnet <- graph_from_data_frame(trajecten,directed=FALSE,vertices=stations)
L <- components(g)
#' Plot graph of nsnet
#'
#' @param data Data on nodes
#' @return A pdf with a plot of nsnet
nsnet_plot <- function(nodes_data=0, edges_data=0){
nsrblauw <- "#003373"
nsgeel <- "#f7d417"
pdf("nsnet.pdf")
set.seed(3)
par(mar=rep(0,4),oma=rep(0,4))
plot(nsnet,vertex.label=NA
, vertex.size=2 + nodes_data
, vertex.color=nsgeel
, edge.color=nsrblauw
, edge.size=1 + edge_data
, vertex.frame.color=nsrblauw)
dev.off()
}# nsnet_plot(data)
nsnet_plot(0)
source("initialization.R")
# Initialize graph
trajecten <- read.csv("data/trajecten.csv",stringsAsFactors = FALSE)
stations <-  read.csv("data/trajecten_stations.csv",stringsAsFactors = FALSE)
nsnet <- graph_from_data_frame(trajecten,directed=FALSE,vertices=stations)
L <- components(g)
#' Plot graph of nsnet
#'
#' @param data Data on nodes
#' @return A pdf with a plot of nsnet
nsnet_plot <- function(nodes_data=0, edges_data=0){
nsrblauw <- "#003373"
nsgeel <- "#f7d417"
pdf("nsnet.pdf")
set.seed(3)
par(mar=rep(0,4),oma=rep(0,4))
plot(nsnet,vertex.label=NA
, vertex.size=2 + nodes_data
, vertex.color=nsgeel
, edge.color=nsrblauw
, edge.size=1 + edge_data
, vertex.frame.color=nsrblauw)
dev.off()
}# nsnet_plot(data)
nsnet_plot(0)
source("initialization.R")
# Initialize graph
trajecten <- read.csv("data/trajecten.csv",stringsAsFactors = FALSE)
stations <-  read.csv("data/trajecten_stations.csv",stringsAsFactors = FALSE)
nsnet <- graph_from_data_frame(trajecten,directed=FALSE,vertices=stations)
L <- components(g)
#' Plot graph of nsnet
#'
#' @param nodes_data Data on nodes (default=0)
#' @param edge_data
#' @return A pdf with a plot of nsnet
nsnet_plot <- function(nodes_data=0, edges_data=0){
nsrblauw <- "#003373"
nsgeel <- "#f7d417"
pdf("nsnet.pdf")
set.seed(3)
par(mar=rep(0,4),oma=rep(0,4))
plot(nsnet,vertex.label=NA
, vertex.size=2 + nodes_data
, vertex.color=nsgeel
, edge.color=nsrblauw
, edge.size=1 + edge_data
, vertex.frame.color=nsrblauw)
dev.off()
}# nsnet_plot(data)
nsnet_plot(0)
source("initialization.R")
# Initialize graph
trajecten <- read.csv("data/trajecten.csv",stringsAsFactors = FALSE)
stations <-  read.csv("data/trajecten_stations.csv",stringsAsFactors = FALSE)
nsnet <- graph_from_data_frame(trajecten,directed=FALSE,vertices=stations)
L <- components(g)
#' Plot graph of nsnet
#'
#' @param nodes_data Data on nodes (default=0)
#' @param edge_data
#' @return A pdf with a plot of nsnet
nsnet_plot <- function(nodes_data=0, edges_data=0){
nsrblauw <- "#003373"
nsgeel <- "#f7d417"
pdf("nsnet.pdf")
set.seed(3)
par(mar=rep(0,4),oma=rep(0,4))
plot(nsnet,vertex.label=NA
, vertex.size=2 + nodes_data
, vertex.color=nsgeel
, edge.color=nsrblauw
, edge.size=1 + edge_data
, vertex.frame.color=nsrblauw)
dev.off()
}# nsnet_plot(data)
nsnet_plot()
source("initialization.R")
# Initialize graph
trajecten <- read.csv("data/trajecten.csv",stringsAsFactors = FALSE)
stations <-  read.csv("data/trajecten_stations.csv",stringsAsFactors = FALSE)
nsnet <- graph_from_data_frame(trajecten,directed=FALSE,vertices=stations)
L <- components(g)
#' Plot graph of nsnet
#'
#' @param nodes_data Data on nodes
#' @param edge_data Data on edges
#' @return A pdf with a plot of nsnet
nsnet_plot <- function(nodes_data, edges_data){
nsrblauw <- "#003373"
nsgeel <- "#f7d417"
pdf("nsnet.pdf")
set.seed(3)
par(mar=rep(0,4),oma=rep(0,4))
plot(nsnet,vertex.label=NA
, vertex.size=2 + nodes_data
, vertex.color=nsgeel
, edge.color=nsrblauw
, edge.size=1 + edge_data
, vertex.frame.color=nsrblauw)
dev.off()
}# nsnet_plot(data)
nsnet_plot(0,0)
source("initialization.R")
# Initialize graph
trajecten <- read.csv("data/trajecten.csv",stringsAsFactors = FALSE)
stations <-  read.csv("data/trajecten_stations.csv",stringsAsFactors = FALSE)
nsnet <- graph_from_data_frame(trajecten,directed=FALSE,vertices=stations)
L <- components(g)
#' Plot graph of nsnet
#'
#' @param nodes_data Data on nodes
#' @param edge_data Data on edges
#' @return A pdf with a plot of nsnet
nsnet_plot <- function(nodes_data, edges_data){
nsrblauw <- "#003373"
nsgeel <- "#f7d417"
pdf("nsnet.pdf")
set.seed(3)
par(mar=rep(0,4),oma=rep(0,4))
plot(nsnet,vertex.label=NA
, vertex.size=2 + nodes_data
, vertex.color=nsgeel
, edge.color=nsrblauw
, edge.size=1 + edges_data
, vertex.frame.color=nsrblauw)
dev.off()
}# nsnet_plot(data)
nsnet_plot(0,0)
source("initialization.R")
source("data/nsnet.R")
source("functions/functions.R")
source("functions/measures.R")
#measures(nsnet,global_efficiency)
#nsnet_plot(3*local_efficiency(nsnet))
a <- vulnerability_edges(nsnet, global_efficiency)
print(stations$naam[which.max(a)])
nsnet_plot(0,10*a)
View(trajecten)
a <- vulnerability_edges(nsnet, global_efficiency)
print(trajecten$start[which.max(a)],trajecten$stop[which.max(a)])
nsnet_plot(0,100*a)
print(a[which.max(a)])
nsnet_plot(0,100*a)
source("initialization.R")
# Initialize graph
trajecten <- read.csv("data/trajecten.csv",stringsAsFactors = FALSE)
stations <-  read.csv("data/trajecten_stations.csv",stringsAsFactors = FALSE)
nsnet <- graph_from_data_frame(trajecten,directed=FALSE,vertices=stations)
L <- components(g)
#' Plot graph of nsnet
#'
#' @param nodes Data on nodes
#' @param edges Data on edges
#' @return A pdf with a plot of nsnet
nsnet_plot <- function(nodes, edges){
nsrblauw <- "#003373"
nsgeel <- "#f7d417"
pdf("nsnet.pdf")
set.seed(3)
par(mar=rep(0,4),oma=rep(0,4))
plot(nsnet,vertex.label=NA
, vertex.size=2 + nodes
, vertex.color=nsgeel
, edge.color=nsrblauw
, edge.width=1 + edges
, vertex.frame.color=nsrblauw)
dev.off()
}# nsnet_plot(data)
source("initialization.R")
source("data/nsnet.R")
source("functions/functions.R")
source("functions/measures.R")
#measures(nsnet,global_efficiency)
#nsnet_plot(3*local_efficiency(nsnet))
nodes <- vulnerability_nodes(nsnet, global_efficiency)
edges <- vulnerability_edges(nsnet, global_efficiency)
print(a[which.max(a)])
nsnet_plot(nodes, edges)
print(stations$naam[which.max(nodes)])
print(trajecten$start[which.max(edges)])
print(trajecten$stop[which.max(edges)])
print(nodes[which.max(nodes)])
print(edges[which.max(edges)])
nsnet_plot(3*nodes, 3*edges)
