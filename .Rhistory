p <- p + geom_line(data=edges,aes(x=lon,y=lat,group=group),colour="#f7d417",size=2)
# for(i in 1:length(trajecten[,1])){
#   dlines <- data.frame(c(0,0))
#   dlines[,"lat"] <- c(trajecten[i,"lat1"],trajecten[i,"lat2"])
#   dlines[,"lon"] <- c(trajecten[i,"lon1"],trajecten[i,"lon2"])
#   dlines <- dlines[,-1]
#   p <- p + geom_line(data=dlines,aes(x=lon,y=lat),colour="#f7d417",size=1)
# }# for
p <- p + geom_point(data=stations,aes(x=as.numeric(geo_lng)
, y=as.numeric(geo_lat)
#, size=DEPARTURES
, colour=vul),size=2)
p <- p + scale_color_gradient(low="blue", high="red")
p <- p + scale_x_continuous(limits=c(3.2,7.1))
p <- p + scale_y_continuous(limits=c(50.75,53.5))
p
p <- ggmap(nlmap)
p <- p + ggtitle(sprintf('NLrail: Undirected - Unweighted')) + xlab("Longitude") + ylab("Latitude")
p <- p + geom_line(data=edges,aes(x=lon,y=lat,group=group),colour="#f7d417",size=2)
# for(i in 1:length(trajecten[,1])){
#   dlines <- data.frame(c(0,0))
#   dlines[,"lat"] <- c(trajecten[i,"lat1"],trajecten[i,"lat2"])
#   dlines[,"lon"] <- c(trajecten[i,"lon1"],trajecten[i,"lon2"])
#   dlines <- dlines[,-1]
#   p <- p + geom_line(data=dlines,aes(x=lon,y=lat),colour="#f7d417",size=1)
# }# for
p <- p + geom_point(data=stations,aes(x=as.numeric(geo_lng)
, y=as.numeric(geo_lat)
#, size=DEPARTURES
, colour=vul),size=3)
p <- p + scale_color_gradient(low="blue", high="red")
p <- p + scale_x_continuous(limits=c(3.2,7.1))
p <- p + scale_y_continuous(limits=c(50.75,53.5))
p
p <- ggmap(nlmap)
p <- p + ggtitle(sprintf('NLrail: Undirected - Unweighted')) + xlab("Longitude") + ylab("Latitude")
p <- p + geom_line(data=edges,aes(x=lon,y=lat,group=group),colour="#f7d417",size=2)
# for(i in 1:length(trajecten[,1])){
#   dlines <- data.frame(c(0,0))
#   dlines[,"lat"] <- c(trajecten[i,"lat1"],trajecten[i,"lat2"])
#   dlines[,"lon"] <- c(trajecten[i,"lon1"],trajecten[i,"lon2"])
#   dlines <- dlines[,-1]
#   p <- p + geom_line(data=dlines,aes(x=lon,y=lat),colour="#f7d417",size=1)
# }# for
p <- p + geom_point(data=stations,aes(x=as.numeric(geo_lng)
, y=as.numeric(geo_lat)
#, size=DEPARTURES
, colour=vul),size=2.5)
p <- p + scale_color_gradient(low="blue", high="red")
p <- p + scale_x_continuous(limits=c(3.2,7.1))
p <- p + scale_y_continuous(limits=c(50.75,53.5))
p
stations <-  read.csv("Network-Data/NLrail/raw_data/trajecten_stations.csv",stringsAsFactors = FALSE) %>%
.[-c(359,360,394),]
p <- ggmap(nlmap) +
ggtitle(sprintf('NLrail: Undirected - Unweighted')) + xlab("Longitude") + ylab("Latitude") +
geom_line(data=edges,aes(x=lon,y=lat,group=group),colour="#f7d417",size=2) +
geom_point(data=stations,aes(x=as.numeric(geo_lng)
, y=as.numeric(geo_lat)
#, size=DEPARTURES
, colour=vul),size=2.5) +
scale_color_gradient(low="blue", high="red") +
scale_x_continuous(limits=c(3.2,7.1)) +
scale_y_continuous(limits=c(50.75,53.5))
p
remove(vul)
gc()
stations$vul <- vulnerability_nodes(cl,nlrail,l=l_nlrail,performance=global_efficiency_unpar)
p <- ggmap(nlmap) +
ggtitle(sprintf('NLrail: Undirected - Unweighted')) + xlab("Longitude") + ylab("Latitude") +
geom_line(data=edges,aes(x=lon,y=lat,group=group),colour="#f7d417",size=2) +
geom_point(data=stations,aes(x=as.numeric(geo_lng)
, y=as.numeric(geo_lat)
#, size=DEPARTURES
, colour=vul),size=2.5) +
scale_color_gradient(low="blue", high="red") +
scale_x_continuous(limits=c(3.2,7.1)) +
scale_y_continuous(limits=c(50.75,53.5))
p
head(stations$vul)
head(stations)
max(stations$vul)
which.max(station$vul)
which.max(stations$vul)
stations[329,]
stations$vul <- vulnerability_nodes(cl,nlrail,performance=global_efficiency_unpar)
# Making plot of nlrail
nlmap <- get_map(location=c("Netherlands"),zoom=7,maptype="toner-background")
p <- ggmap(nlmap) +
ggtitle(sprintf('NLrail: Undirected - Unweighted')) + xlab("Longitude") + ylab("Latitude") +
geom_line(data=edges,aes(x=lon,y=lat,group=group),colour="#f7d417",size=2) +
geom_point(data=stations,aes(x=as.numeric(geo_lng)
, y=as.numeric(geo_lat)
, colour=vul),size=2.5) +
scale_color_gradient(low="blue", high="red") +
scale_x_continuous(limits=c(3.2,7.1)) +
scale_y_continuous(limits=c(50.75,53.5))
p
gc()
source("system/initialization.R")
source("system/parallell_programming.R")
source("system/functions.R")
source("functions/measures_distance.R")
setwd("functions/OACC");source("scripts/BDM2D.R");setwd("../../")
source("functions/tests_distance.R")
source("functions/analyse.R")
source("Network-Data/USpower/uspower.R")
cl <- start_cluster(sources=c("system/initialization.R","functions/measures_distance.R"))
vcount(uspower_uu)
w_usair <- spread(usair,key="DEST",value="PASSENGERS")
source("system/initialization.R")
source("system/parallell_programming.R")
source("system/functions.R")
w_usair <- spread(usair,key="DEST",value="PASSENGERS")
# For the distances we need the global coordinates
us_coordinates <- read.csv("Network-Data/USair/raw_data/us_coordinates.csv", stringsAsFactors = FALSE)
# First we make an edge list, useful for all our graphs
usair <- read.csv("Network-Data/USair/raw_data/flight_data.csv"
, stringsAsFactors = FALSE) %>%
# We only use passenger flights, national airports and no self-loops
filter(PASSENGERS > 0
, ORIGIN_COUNTRY_NAME=="United States"
, DEST_COUNTRY_NAME=="United States"
, !(ORIGIN%in%c("ROR", "AWK", "TIQ", "UAM","PPG","JON"
,"OFU","TAV","FAQ","MDY","SAW","GUM"
,"ROP","SPN"))
, !(DEST%in%c("ROR", "AWK", "TIQ", "UAM","PPG","JON"
,"OFU","TAV","FAQ","MDY","SAW","GUM"
,"ROP","SPN"))
, ORIGIN!=DEST) %>%
# Rest is not usefull anymore
select(PASSENGERS,ORIGIN,DEST) %>%
# We want an edge list with origin - destination - #passengers between these airports
arrange(ORIGIN,DEST) %>%
group_by(ORIGIN,DEST) %>%
summarise(N_PASSENGERS = sum(PASSENGERS, na.rm = TRUE)) %>%
select(ORIGIN,DEST,N_PASSENGERS) %>%
`colnames<-`(c("ORIGIN","DEST","PASSENGERS"))
# List of airports
nodes_origin <- unique(usair$ORIGIN)
nodes_dest <- unique(usair$DEST)
nodes_usair <- unique(c(nodes_origin,nodes_dest))
# Initializing graph as directed
usair_du <- graph_from_data_frame(usair[,c("ORIGIN","DEST")],directed=TRUE,nodes_usair)
# Only use the main cluster (measured from Atlanta)
usair_du <- induced_subgraph(usair_du,vids=ego(usair_du, order=10000,nodes="ATL")[[1]])
# Matrices from usair
adj_usair_du <- as_adjacency_matrix(usair_du, type = "both", sparse=FALSE)
l_usair <- read.csv("Network-Data/USair/cooked_data/l_usair.csv", stringsAsFactors = FALSE)
View(l_usair)
l_usair <- read.csv("Network-Data/USair/cooked_data/l_usair.csv", stringsAsFactors = FALSE) %>%
`row.names<-`(l_usair[,1]) %>%
.[,-1] %>%
`colnames<-`(.,colnames(.))
head(l_usair)
View(l_usair)
l_usair <- read.csv("Network-Data/USair/cooked_data/l_usair.csv", stringsAsFactors = FALSE) %>%
`row.names<-`(l_usair[,1]) %>%
.[,-1] %>%
`colnames<-`(.,row.names(.))
View(l_usair)
l_usair <- read.csv("Network-Data/USair/cooked_data/l_usair.csv", stringsAsFactors = FALSE) %>%
`row.names<-`(l_usair[,1]) %>%
`colnames<-`(.,c("X",l_usair[,1])) %>%
.[,-1]
View(l_usair)
remove(l_usair)
gc()
l_usair <- read.csv("Network-Data/USair/cooked_data/l_usair.csv", stringsAsFactors = FALSE) %>%
`row.names<-`(l_usair[,1]) %>%
`colnames<-`(.,c("X",l_usair[,1])) %>%
.[,-1]
l_usair <- read.csv("Network-Data/USair/cooked_data/l_usair.csv", stringsAsFactors = FALSE) %>%
`row.names<-`(.,.[,1]) %>%
`colnames<-`(.,c("X",.[,1])) %>%
.[,-1]
View(l_usair)
l_usair <- read.csv("Network-Data/USair/cooked_data/l_usair.csv", stringsAsFactors = FALSE) %>%
`row.names<-`(.,.[,1]) %>%
`colnames<-`(.,c("X",.[,1])) %>%
.[,-1] %>%
as.matrix()
dim(l_usair)
w_usair <- spread(usair,key="DEST",value="PASSENGERS")
w_usair[,1]
tail(w_usair)
View(w_usair)
w_usair[which(w_usair[,1]%in%V(usair_du)$name),1]
usair_uu <- graph_from_adjacency_matrix(adj_usair_du,mode="max")
usair_du <- graph_from_adjacency_matrix(adj_usair_du,mode="directed")
usair_uw <- graph_from_adjacency_matrix(adj_usair_du*l_usair,mode="max",weighted=TRUE)
usair_dw <- graph_from_adjacency_matrix(adj_usair_du*l_usair,mode="directed",weighted=TRUE)
w_usair[which(w_usair[,1]%in%V(usair_du)$name),1]
w_usair[which(as.matrix(w_usair[,1])%in%V(usair_du)$name),1]
w_usair[!which(as.matrix(w_usair[,1])%in%V(usair_du)$name),1]
w_usair[which(!(as.matrix(w_usair[,1])%in%V(usair_du)$name)),1]
View(w_usair[which(!(as.matrix(w_usair[,1])%in%V(usair_du)$name)),1])
View(w_usair[which(!(as.matrix(w_usair[,1])%in%V(usair_du)$name)),])
usair <- filter(usair, ORIGIN%in%V(usair_uu)$name, DEST%in%V(usair_uu)$name)
w_usair <- spread(usair,key="DEST",value="PASSENGERS")
w_usair[which(!(as.matrix(w_usair[,1])%in%V(usair_du)$name)),1]
View(w_usair[which(!(as.matrix(w_usair[,1])%in%V(usair_du)$name)),])
w_usair[which(!(as.matrix(w_usair[,1])%in%V(usair_du)$name)),]
adj_usair_du <- as_adjacency_matrix(usair_du, type = "both", sparse=FALSE)
write.csv(l_usair,file="Network-Data/USair/cooked_data/adj_usair_du.csv")
w_usair <- spread(usair,key="DEST",value="PASSENGERS")
dim(l_usair)
length(unique(usair$ORIGIN))
length(unique(usair$DEST))
write.csv(usair, "Network-Data/USair/cooked_data/usair.csv")
remove(usair)
usair <- read.csv("Network-Data/USair/cooked_data/usair.csv", stringsAsFactors = FALSE)
head(usair)
usair <- read.csv("Network-Data/USair/cooked_data/usair.csv", stringsAsFactors = FALSE) %>%
.[,-1]
head(usair)
w_usairnet <- l_usairnet - l_usairnet
for (pointer in 1:length(usair[,1])){
w_usairnet[usair[pointer,1],usair[pointer,2]] <- usair[pointer,3]
}# for
w_usair <- l_usair - l_usair
for (pointer in 1:length(usair[,1])){
w_usair[usair[pointer,1],usair[pointer,2]] <- usair[pointer,3]
}# for
dim(w_usair)
View(w_usair)
#' Plot graph of USair
#'
#' @param net A graph
#' @param nodes Data on nodes - optional -
#' @param file_path A string name (without .pdf)
#' @return A pdf with a plot of USair
plot_usair <- function(net, nodes=NULL, file_path,name){
# Data is zero when missing
if (is.null(nodes)){
nodes <- vector(mode="numeric", length = vcount(net))
nodes <- nodes + 1
}# if
# Plotting and storing image of USair
file_name <- sprintf('%s_map.pdf',file_path)
pdf(file_name)
par(mar=rep(0,4),oma=rep(0,4))
plot(net,vertex.label=NA
, vertex.size=1 + nodes
, vertex.color="blue"
, edge.color="lightblue"
, edge.width=1
, vertex.frame.color="darkblue"
, edge.arrow.size = 0.5
, main = sprintf('\n\n %s',name))
dev.off()
# Plotting and storing histogram of USair nodes data
file_name <- sprintf('%s_hist.pdf',file_path)
pdf(file_name)
hist(nodes
, breaks=100
, xlab="Vulnerability (Binsize = 0.001)"
, ylab="Frequency"
, main=sprintf('\n Vulnerability of nodes of %s',name))
dev.off()
# Storing in .csv-file
file_name <- sprintf('%s.csv',file_path)
write.csv(nodes,file=file_name)
}# plot_usairnet
#' Plot graph of USair
#'
#' @param net A graph
#' @param nodes Data on nodes - optional -
#' @param file_path A string name (without .pdf)
#' @return A pdf with a plot of USair
plot_usair <- function(net, nodes=NULL, file_path,name){
# Data is zero when missing
if (is.null(nodes)){
nodes <- vector(mode="numeric", length = vcount(net))
nodes <- nodes + 1
}# if
# Plotting and storing image of USair
file_name <- sprintf('%s_map.pdf',file_path)
pdf(file_name)
par(mar=rep(0,4),oma=rep(0,4))
plot(net,vertex.label=NA
, vertex.size=1 + nodes
, vertex.color="blue"
, edge.color="lightblue"
, edge.width=1
, vertex.frame.color="darkblue"
, edge.arrow.size = 0.5
, main = sprintf('\n\n %s',name))
dev.off()
# Plotting and storing histogram of USair nodes data
file_name <- sprintf('%s_hist.pdf',file_path)
pdf(file_name)
hist(nodes
, breaks=100
, xlab="Vulnerability (Binsize = 0.001)"
, ylab="Frequency"
, main=sprintf('\n Vulnerability of nodes of %s',name))
dev.off()
# Storing in .csv-file
file_name <- sprintf('%s.csv',file_path)
write.csv(nodes,file=file_name)
}# plot_usairnet
plot_usair(usair_uu,file_path="Network-Data/USair/pdf/usair_test","USair")
plot_usair(net=usair_uu,file_path="Network-Data/USair/pdf/usair_test",name="USair")
dev.off()
plot(usair_uu,vertex.label=NA
, vertex.size=1
, vertex.color="blue"
, edge.color="lightblue"
, edge.width=1
, vertex.frame.color="darkblue"
, edge.arrow.size = 0.5
, main = sprintf('\n\n %s',"USair"))
plot(usair_uu,vertex.label=NA
, vertex.size=1
, vertex.color="blue"
, edge.color="lightblue"
, edge.width=2
, vertex.frame.color="darkblue"
, edge.arrow.size = 0.5
, main = sprintf('\n\n %s',"USair"))
plot(usair_uu,vertex.label=NA
, vertex.size=2
, vertex.color="blue"
, edge.color="lightblue"
, edge.width=1
, vertex.frame.color="darkblue"
, edge.arrow.size = 0.5
, main = sprintf('\n\n %s',"USair"))
plot_usair(net=usair_uu,file_path="Network-Data/USair/pdf/usair_test",name="USair")
source("system/functions.R")
cl <- start_cluster(sources=c("system/initialization.R","system/functions.R","functions/measures_distance.R"))
t_usair_uu_sum <- transport_sum(cl,usair_uu,w_usair)
t_usair_du_sum <- transport_sum(cl,usair_du,w_usair)
t_usair_uw_sum <- transport_sum(cl,usair_uw,w_usair)
t_usair_dw_sum <- transport_sum(cl,usair_dw,w_usair)
t_usair_uu_min <- transport_min(cl,usair_uu,w_usair)
t_usair_du_min <- transport_min(cl,usair_du,w_usair)
t_usair_uw_min <- transport_min(cl,usair_uw,w_usair)
t_usair_dw_min <- transport_min(cl,usair_dw,w_usair)
t_usair_uu_min <- transport_min(cl,usair_uu,w_usair)
t_usair_du_min <- transport_min(cl,usair_du,w_usair)
t_usair_uu_sum[is.na(t_usair_uu_sum)]
t_usair_uu_sum[t_usair_uu_sum==Inf]
View(t_usair_du_sum)
write.csv(t_usair_uu_sum,file="Network-Data/USair/cooked_data/t_usair_uu_sum")
write.csv(t_usair_uu_sum,file="Network-Data/USair/cooked_data/t_usair_uu_sum.csv")
head(t_usair_uu_sum)
dim(t_usair_du_sum)
# We use two different approximations for the transport matrix
t_usair_uu_sum  %>%
`rownames<-`(rownames(l_usair)) %>%
`colnames<-`(colnames(l_usair)) %T>%
write.csv(t_usair_uu_sum,file="Network-Data/USair/cooked_data/t_usair_uu_sum.csv")
# We use two different approximations for the transport matrix
t_usair_uu_sum  %>%
`rownames<-`(rownames(l_usair)) %>%
`colnames<-`(colnames(l_usair)) %T>%
write.csv(file="Network-Data/USair/cooked_data/t_usair_uu_sum.csv")
source("system/initialization.R")
# We use two different approximations for the transport matrix
t_usair_uu_sum  %>%
`rownames<-`(rownames(l_usair)) %>%
`colnames<-`(colnames(l_usair)) %T>%
write.csv(file="Network-Data/USair/cooked_data/t_usair_uu_sum.csv")
# We use two different approximations for the transport matrix
t_usair_uu_sum  %>%
`rownames<-`(rownames(l_usair)) %>%
`colnames<-`(colnames(l_usair)) %>%
write.csv(file="Network-Data/USair/cooked_data/t_usair_uu_sum.csv")
t_usair_du_sum %>%
`rownames<-`(rownames(l_usair)) %>%
`colnames<-`(colnames(l_usair)) %T>%
write.csv(t_usair_uu_sum,file="Network-Data/USair/cooked_data/t_usair_du_sum.csv")
t_usair_du_sum %>%
`rownames<-`(rownames(l_usair)) %>%
`colnames<-`(colnames(l_usair)) %>%
write.csv(t_usair_uu_sum,file="Network-Data/USair/cooked_data/t_usair_du_sum.csv")
# We use two different approximations for the transport matrix
t_usair_uu_sum %>%
`rownames<-`(rownames(l_usair)) %>%
`colnames<-`(colnames(l_usair)) %>%
write.csv(file="Network-Data/USair/cooked_data/t_usair_uu_sum.csv")
# We use two different approximations for the transport matrix
t_usair_uu_sum %>%
`rownames<-`(rownames(l_usair)) %>%
`colnames<-`(colnames(l_usair)) %T>%
write.csv(file="Network-Data/USair/cooked_data/t_usair_uu_sum.csv")
library(magrittr)
# We use two different approximations for the transport matrix
t_usair_uu_sum %>%
`rownames<-`(rownames(l_usair)) %>%
`colnames<-`(colnames(l_usair)) %T>%
write.csv(file="Network-Data/USair/cooked_data/t_usair_uu_sum.csv")
t_usair_du_sum %>%
`rownames<-`(rownames(l_usair)) %>%
`colnames<-`(colnames(l_usair)) %T>%
write.csv(file="Network-Data/USair/cooked_data/t_usair_du_sum.csv")
t_usair_uw_sum  %>%
`rownames<-`(rownames(l_usair)) %>%
`colnames<-`(colnames(l_usair)) %T>%
write.csv(file="Network-Data/USair/cooked_data/t_usair_uw_sum.csv")
t_usair_dw_sum %>%
`rownames<-`(rownames(l_usair)) %>%
`colnames<-`(colnames(l_usair)) %T>%
write.csv(file="Network-Data/USair/cooked_data/t_usair_dw_sum.csv")
source("system/initialization.R")
t_usair_uu_min <- transport_min(cl,usair_uu,w_usair) %>%
`rownames<-`(rownames(l_usair)) %>%
`colnames<-`(colnames(l_usair)) %T>%
write.csv(file="Network-Data/USair/cooked_data/t_usair_uu_min.csv")
cl <- start_cluster(sources=c("system/initialization.R","system/functions.R","functions/measures_distance.R"))
t_usair_uu_min <- transport_min(cl,usair_uu,w_usair) %>%
`rownames<-`(rownames(l_usair)) %>%
`colnames<-`(colnames(l_usair)) %T>%
write.csv(file="Network-Data/USair/cooked_data/t_usair_uu_min.csv")
source("Network-Data/NORdirectors/nordirectors.R")
#' Plot graph of USair
#'
#' @param net A graph
#' @param nodes Data on nodes - optional -
#' @param file_path A string name (without .pdf)
#' @return A pdf with a plot of USair
plot_usair <- function(net, nodes=NULL, file_path,name){
# Data is zero when missing
if (is.null(nodes)){
nodes <- vector(mode="numeric", length = vcount(net))
nodes <- nodes + 1
}# if
# Plotting and storing image of USair
file_name <- sprintf('%s_map.pdf',file_path)
pdf(file_name)
par(mar=rep(0,4),oma=rep(0,4))
plot(net,vertex.label=NA
, vertex.size=1 + nodes
, vertex.color="blue"
, edge.color="lightblue"
, edge.width=1
, vertex.frame.color="darkblue"
, edge.arrow.size = 0.5
, main = sprintf('\n\n %s',name))
dev.off()
# Plotting and storing histogram of USair nodes data
file_name <- sprintf('%s_hist.pdf',file_path)
pdf(file_name)
hist(nodes
, breaks=100
, xlab="Vulnerability (Binsize = 0.001)"
, ylab="Frequency"
, main=sprintf('\n Vulnerability of nodes of %s',name))
dev.off()
}# plot_usair
nodes_uu <- vulnerability_nodes(cl,usair_uu,performance=global_efficiency_unpar) %>%
`names<-`(nodes_names) %T>%
write.csv("Network-Data/USair/data/vulnerability_uu.csv") %>%
plot_usair(usair_uu
, nodes=100*nodes_uu
, file_path="Network-Data/USair/pdf/usair_uu"
, name="USair: \n unweighted, undirected")
source("functions/tests_distance.R")
source("functions/measures_distance.R")
nodes_uu <- vulnerability_nodes(cl,usair_uu,performance=global_efficiency_unpar) %>%
`names<-`(nodes_names) %T>%
write.csv("Network-Data/USair/data/vulnerability_uu.csv") %>%
plot_usair(usair_uu
, nodes=100*nodes_uu
, file_path="Network-Data/USair/pdf/usair_uu"
, name="USair: \n unweighted, undirected")
nodes_names <- V(usair_uu)$name
nodes_uu <- vulnerability_nodes(cl,usair_uu,performance=global_efficiency_unpar) %>%
`names<-`(nodes_names) %T>%
write.csv("Network-Data/USair/data/vulnerability_uu.csv") %>%
plot_usair(usair_uu
, nodes=100*nodes_uu
, file_path="Network-Data/USair/pdf/usair_uu"
, name="USair: \n unweighted, undirected")
min(nodes_uu)
nodes_uu <- vulnerability_nodes(cl,usair_uu,performance=global_efficiency_unpar) %>%
`names<-`(nodes_names) %T>%
write.csv("Network-Data/USair/data/vulnerability_uu.csv") %T>%
plot_usair(usair_uu
, nodes=100*nodes_uu
, file_path="Network-Data/USair/pdf/usair_uu"
, name="USair: \n unweighted, undirected")
nodes_uu <- vulnerability_nodes(cl,usair_uu,performance=global_efficiency_unpar) %>%
`names<-`(nodes_names) %T>%
write.csv("Network-Data/USair/data/vulnerability_uu.csv") %T>%
plot_usair(net=usair_uu
, nodes=100*nodes_uu
, file_path="Network-Data/USair/pdf/usair_uu"
, name="USair: \n unweighted, undirected")
nodes_uu <- vulnerability_nodes(cl,usair_uu,performance=global_efficiency_unpar) %>%
`names<-`(nodes_names) %T>%
write.csv("Network-Data/USair/data/vulnerability_uu.csv") %T>%
plot_usair(nodes=100*nodes_uu
, file_path="Network-Data/USair/pdf/usair_uu"
, name="USair: \n unweighted, undirected")
nodes_uu <- vulnerability_nodes(cl,usair_uu,performance=global_efficiency_unpar) %>%
`names<-`(nodes_names) %T>%
write.csv("Network-Data/USair/data/vulnerability_uu.csv") %T>%
plot_usair(net=usair_uu
, nodes=100*.
, file_path="Network-Data/USair/pdf/usair_uu"
, name="USair: \n unweighted, undirected")
nodes_uu <- vulnerability_nodes(cl,usair_uu,performance=global_efficiency_unpar) %>%
`names<-`(nodes_names) %T>%
write.csv("Network-Data/USair/data/vulnerability_uu.csv") %T>%
plot_usair(net=usair_uu
, nodes=.
, file_path="Network-Data/USair/pdf/usair_uu"
, name="USair: \n unweighted, undirected")
gc()
